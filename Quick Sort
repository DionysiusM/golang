package main

import (
	"fmt"
	"math/rand"
	"time"
)

func main() {

	slice := []int{4, 2, 5, 6, 1, 0, 4, 11, 53, 10, 24}
	fmt.Println("\n--- Unsorted --- \n\n", slice)
	quicksort(slice)
	fmt.Println("\n--- Sorted ---\n\n", slice, "\n")
}

// Generates a slice of size, size filled with random numbers
func generateSlice(size int) []int {

	slice := make([]int, size, size)
	rand.Seed(time.Now().UnixNano())
	for i := 0; i < size; i++ {
		slice[i] = rand.Intn(999) - rand.Intn(999)
	}
	return slice
}

func quicksort(a []int) []int {
	if len(a) < 2 {
		return a
	}

	left, right := 0, len(a)-1

	pivot := rand.Int() % len(a)

	a[pivot], a[right] = a[right], a[pivot]
	fmt.Println("a[ppivot], a[right]", a[pivot], a[right])

	for i, _ := range a {
		fmt.Println("a[i]", a[i], i, " ")
		if a[i] < a[right] {

			a[left], a[i] = a[i], a[left]
			fmt.Println("a[left], a[i]", a[left], a[i])
			left++

		}
	}

	a[left], a[right] = a[right], a[left]
	fmt.Println("left right", a[left], a[right])
	quicksort(a[:left])
	quicksort(a[left+1:])

	return a
}
